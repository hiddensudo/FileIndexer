@startuml
class MyApp {
  -QQmlApplicationEngine engine
  -Indexer indexer
  -FillModel fillModel
  -void setupAttributes()
  -void setupEngine()
  -void setupConnections()
  +MyApp(int &argc, char **argv)
  +int run() { return exec(); }
}

class CustomStandardItemModel{
Q_OBJECT
+enum RolesRoles {FileIdRole = Qt::UserRole + 1, NameRole, ExtensionRole, DateRole, SizeRole };
+explicit CustomStandardItemModel(QObject *parent = nullptr);
+QVariant data(const QModelIndex &index, int role) const override;
+QHash<int, QByteArray> roleNames() const override;
}

class FillModel {
Q_OBJECT
-QFile file;
-CustomStandardItemModel *model;
-void openFile();
-void close();
-void parseFile(QXmlStreamReader &xml, const QString &criteria, const QString &text, const QString &extension);
+FillModel();
+~FillModel();
+QStandardItemModel *getModel() const;
+void parseXML();
+void filter(const QString &criteria, const QString &text, QString &extension);
}

class Indexer {
Q_OBJECT
  -QString xmlPath
  -XMLWriter wr
  -std::string startDirectory
  -bool isProcessingInCurrentDir
  -std::atomic<unsigned int> activeThreads
  -std::atomic<bool> isPaused
  -std::atomic<bool> isCancelled
  -std::atomic<bool> isStarted
  -std::mutex pauseMutex
  -std::queue<std::filesystem::path> processingQueue
  -std::mutex queueMutex
  -std::condition_variable queueCV
  -std::mutex indexMutex
  -void indexInDirAndSubDir(const std::string &currentDirectory)
  -void indexInCurrentDir(const std::string &currentDirectory)
  -void processAll()
  -void processDirectory(const std::string &currentDirectory)
  -void processQueue(std::string &currentDirectory)
  -void processFilesBaseOnScope(const std::string &currentDirectory)
  -void writeInXml(const std::filesystem::directory_entry &entry)
  -bool toggleIndexingScope()
  -void refresh()
  -void startIndexing()
  +Indexer()
  +~Indexer() = default
  +Q_INVOKABLE void detachRun(const QString &startDirectory, isProcessingInCurrentDir)
  +bool getIsStarted() const
  +bool getIsPaused() const
  +bool getIsCancelled() const;|
  +void isStartedChanged()
  +void isPausedChanged()
  +void isCancelledChanged()
  +void pause()
  +void resume()
  +void stop()
}

class XMLWriter {
    -QDomDocument document;
    -QFile file;
    -void openFile();
    -void openIfExist();
    -QDomElement getRoot(const QString &listName, QDomDocument &document);
    -QDomElement createFileElement(const QString &name, const QString &extension, QString &date, const QString &size, QDomDocument &document);
    -void writeToFile(QDomDocument &document);
    -bool checkAndUpdateFile(const QString &name, const QString &extension, const QString &date, const QString &size, QDomElement &root);
    -QDomElement createTextElement(const QString &tagName, const QString &text, QDomDocument &document);
    -bool isFileExists(const QString &listName, const QString &fileName);
    +XMLWriter(const QString &fileName);
    +~XMLWriter();
    +void close();
    +void writeInFile(const QString listName, const QString name, const QString extension, const QString date, const QString size);
}

MyApp --> Indexer : uses >
MyApp --> FillModel : uses >
Indexer --|> QObject
FillModel --|> QObject
FillModel --> CustomStandardItemModel : uses >
CustomStandardItemModel --|> QStandardItemModel
Indexer --> XMLWriter : uses >
@enduml

"//www.plantuml.com/plantuml/png/dLPFTnet4B_pAUR4Msnyw9Mal61CNsdZE6kSD3S_UJK6jLffAsaTY6D_zcgqYnOMrdxk1NPcVlFJ_D58-c0TCwxCPI-Jp5gut4oA0Xvx06TfcailI94n9xIQgQLG21Z-o3vN7DTeG5J_fFfDI7cfEKguttwH-a4B3XPTMKoSC-AkT6YJmRwbeczhfrefp6Zvok4qn9S8vQ3Fp38RGhPY1avElF0G06GofKe6y0Z6KnW5Fhei6Ro3fzvJhqvpMbgdyuLZYZF3vmxp4EnZBxszElzZDhtfdQ8gSxZM4ctuWKUV7Cuv2V0hf6uq-cBH1F4KVXd29vOZIKEOhHqgwsEkn0lcQiD2_0XVyFJEyw-fjC9rnPAaLtT_O-RWf606bVEBgbBAmfc1zqw_CYEOrtBcM99fPHsamI-q1VgXAqC8vT0I1r1Xz0CQ8pWInU_Chjvxm13Iyut3YJ5iCmveoiKcXpwnVasZTqfsbbA9gFKUUjQH5fpazES1eSkwG4LUoM2hoQIsEw9Ftc90fDzokN06MNwDZAE1_ZgNGwXpznQXbj3FZ71e13imE5ox0oLkMqKrZKab93tlY-cHJ9ReQa35ws5DpDykFv9Zq51D79haRR4UZJAse1w_tGRGqDO-lZIVcLkHoWVoLrW8lXkIhUEZaQrWOVelXC7CQRCXwvtM4eJzR7I6rdhCN4rBOr0HBBeptrgHlIzzL4k5dBRP65Zcn0FUh0moRjjGuXqJCIijyYxhbAaCfUm6B2ZW7NDU-bf1GQINz1aD_vPOullmIHlIRgp3V3GgV576KCJiKeArsCYrnURxmmKTGxSFD7Tt4YlKz6lBDunTzANULwgvykMRABuex_n7lH5sEz7FOfMhPWnQ1B4DRtMlavr8cHme8_n_KORY9M_peL6svypYbLfaki2tBVoTDl9S-PCW-hKQpBTEjvx1RA0V_WPnQpkzN4eCm-FNga9e-0tU6xIhHbDDo1OUzAVrv5N2SvJy0StndfNIaJwzdN_wUlNdvFpZ308HHyUorNMfsgV0_WmEEuSlB1ToMAARRoTXU_Ri6sdAkcnnnkAnzPC056GpODCLKqk2DAP0UjmIAG-DOJHtP8Esp7SLrkd2Y_5SQuuhUeNGaNQXymkTUI-wxkgFTxKjtZYredsfjBJp-zbQM1SDn3sJI8nKd6kjNRizqkFfFXp2NY3zRIJ7g3A3p265K6lQf8e8Eo-ZOQFZp1q2hVZnQZZDkDpeK8kNuFLiP2lC_fae_gNWTVXlZBjjUJdwMAw-qVg5Ejxu1JhgwDYIUjDrWRwUiWW7KjWKjhlpBGFjDpBKJATnooQl09yRv5Qrz-Q9gdZI7Mb2LrZ7UjFPccETeSPKBupmoeQpit5yPOoWj6XXt9YQDs1ZhD7U_7CCzVkr5t7Twd7N8xYXxW3Kd0Vw60gHnwetT1zGyJAN_m40"